'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2407
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSIdentify
    Inherits DataSet
    
    Private tableDataBin As DataBinDataTable
    
    Private tableHistoricoDispensas As HistoricoDispensasDataTable
    
    Private tableBiometriaDPLogs As BiometriaDPLogsDataTable
    
    Private tableBiometriaDP As BiometriaDPDataTable
    
    Private relationDataBin_HistoricoDispensas As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DataBin")) Is Nothing) Then
                Me.Tables.Add(New DataBinDataTable(ds.Tables("DataBin")))
            End If
            If (Not (ds.Tables("HistoricoDispensas")) Is Nothing) Then
                Me.Tables.Add(New HistoricoDispensasDataTable(ds.Tables("HistoricoDispensas")))
            End If
            If (Not (ds.Tables("BiometriaDPLogs")) Is Nothing) Then
                Me.Tables.Add(New BiometriaDPLogsDataTable(ds.Tables("BiometriaDPLogs")))
            End If
            If (Not (ds.Tables("BiometriaDP")) Is Nothing) Then
                Me.Tables.Add(New BiometriaDPDataTable(ds.Tables("BiometriaDP")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DataBin As DataBinDataTable
        Get
            Return Me.tableDataBin
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property HistoricoDispensas As HistoricoDispensasDataTable
        Get
            Return Me.tableHistoricoDispensas
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BiometriaDPLogs As BiometriaDPLogsDataTable
        Get
            Return Me.tableBiometriaDPLogs
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BiometriaDP As BiometriaDPDataTable
        Get
            Return Me.tableBiometriaDP
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSIdentify = CType(MyBase.Clone,DSIdentify)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("DataBin")) Is Nothing) Then
            Me.Tables.Add(New DataBinDataTable(ds.Tables("DataBin")))
        End If
        If (Not (ds.Tables("HistoricoDispensas")) Is Nothing) Then
            Me.Tables.Add(New HistoricoDispensasDataTable(ds.Tables("HistoricoDispensas")))
        End If
        If (Not (ds.Tables("BiometriaDPLogs")) Is Nothing) Then
            Me.Tables.Add(New BiometriaDPLogsDataTable(ds.Tables("BiometriaDPLogs")))
        End If
        If (Not (ds.Tables("BiometriaDP")) Is Nothing) Then
            Me.Tables.Add(New BiometriaDPDataTable(ds.Tables("BiometriaDP")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableDataBin = CType(Me.Tables("DataBin"),DataBinDataTable)
        If (Not (Me.tableDataBin) Is Nothing) Then
            Me.tableDataBin.InitVars
        End If
        Me.tableHistoricoDispensas = CType(Me.Tables("HistoricoDispensas"),HistoricoDispensasDataTable)
        If (Not (Me.tableHistoricoDispensas) Is Nothing) Then
            Me.tableHistoricoDispensas.InitVars
        End If
        Me.tableBiometriaDPLogs = CType(Me.Tables("BiometriaDPLogs"),BiometriaDPLogsDataTable)
        If (Not (Me.tableBiometriaDPLogs) Is Nothing) Then
            Me.tableBiometriaDPLogs.InitVars
        End If
        Me.tableBiometriaDP = CType(Me.Tables("BiometriaDP"),BiometriaDPDataTable)
        If (Not (Me.tableBiometriaDP) Is Nothing) Then
            Me.tableBiometriaDP.InitVars
        End If
        Me.relationDataBin_HistoricoDispensas = Me.Relations("DataBin_HistoricoDispensas")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSIdentify"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DSIdentify.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableDataBin = New DataBinDataTable
        Me.Tables.Add(Me.tableDataBin)
        Me.tableHistoricoDispensas = New HistoricoDispensasDataTable
        Me.Tables.Add(Me.tableHistoricoDispensas)
        Me.tableBiometriaDPLogs = New BiometriaDPLogsDataTable
        Me.Tables.Add(Me.tableBiometriaDPLogs)
        Me.tableBiometriaDP = New BiometriaDPDataTable
        Me.Tables.Add(Me.tableBiometriaDP)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("DataBin_HistoricoDispensas", New DataColumn() {Me.tableDataBin.DataBin_IdColumn}, New DataColumn() {Me.tableHistoricoDispensas.DataBin_IdColumn})
        Me.tableHistoricoDispensas.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationDataBin_HistoricoDispensas = New DataRelation("DataBin_HistoricoDispensas", New DataColumn() {Me.tableDataBin.DataBin_IdColumn}, New DataColumn() {Me.tableHistoricoDispensas.DataBin_IdColumn}, false)
        Me.relationDataBin_HistoricoDispensas.Nested = true
        Me.Relations.Add(Me.relationDataBin_HistoricoDispensas)
    End Sub
    
    Private Function ShouldSerializeDataBin() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeHistoricoDispensas() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBiometriaDPLogs() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBiometriaDP() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub DataBinRowChangeEventHandler(ByVal sender As Object, ByVal e As DataBinRowChangeEvent)
    
    Public Delegate Sub HistoricoDispensasRowChangeEventHandler(ByVal sender As Object, ByVal e As HistoricoDispensasRowChangeEvent)
    
    Public Delegate Sub BiometriaDPLogsRowChangeEventHandler(ByVal sender As Object, ByVal e As BiometriaDPLogsRowChangeEvent)
    
    Public Delegate Sub BiometriaDPRowChangeEventHandler(ByVal sender As Object, ByVal e As BiometriaDPRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DataBinDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNome As DataColumn
        
        Private columnSexo As DataColumn
        
        Private columnDataNasc As DataColumn
        
        Private columnDispensaBiometria As DataColumn
        
        Private columnDataFinalDispensa As DataColumn
        
        Private columnNomeMae As DataColumn
        
        Private columnCPF As DataColumn
        
        Private columnRG As DataColumn
        
        Private columnIdade As DataColumn
        
        Private columnDataBin_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("DataBin")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NomeColumn As DataColumn
            Get
                Return Me.columnNome
            End Get
        End Property
        
        Friend ReadOnly Property SexoColumn As DataColumn
            Get
                Return Me.columnSexo
            End Get
        End Property
        
        Friend ReadOnly Property DataNascColumn As DataColumn
            Get
                Return Me.columnDataNasc
            End Get
        End Property
        
        Friend ReadOnly Property DispensaBiometriaColumn As DataColumn
            Get
                Return Me.columnDispensaBiometria
            End Get
        End Property
        
        Friend ReadOnly Property DataFinalDispensaColumn As DataColumn
            Get
                Return Me.columnDataFinalDispensa
            End Get
        End Property
        
        Friend ReadOnly Property NomeMaeColumn As DataColumn
            Get
                Return Me.columnNomeMae
            End Get
        End Property
        
        Friend ReadOnly Property CPFColumn As DataColumn
            Get
                Return Me.columnCPF
            End Get
        End Property
        
        Friend ReadOnly Property RGColumn As DataColumn
            Get
                Return Me.columnRG
            End Get
        End Property
        
        Friend ReadOnly Property IdadeColumn As DataColumn
            Get
                Return Me.columnIdade
            End Get
        End Property
        
        Friend ReadOnly Property DataBin_IdColumn As DataColumn
            Get
                Return Me.columnDataBin_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DataBinRow
            Get
                Return CType(Me.Rows(index),DataBinRow)
            End Get
        End Property
        
        Public Event DataBinRowChanged As DataBinRowChangeEventHandler
        
        Public Event DataBinRowChanging As DataBinRowChangeEventHandler
        
        Public Event DataBinRowDeleted As DataBinRowChangeEventHandler
        
        Public Event DataBinRowDeleting As DataBinRowChangeEventHandler
        
        Public Overloads Sub AddDataBinRow(ByVal row As DataBinRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDataBinRow(ByVal Nome As String, ByVal Sexo As String, ByVal DataNasc As String, ByVal DispensaBiometria As String, ByVal DataFinalDispensa As String, ByVal NomeMae As String, ByVal CPF As String, ByVal RG As String, ByVal Idade As Integer) As DataBinRow
            Dim rowDataBinRow As DataBinRow = CType(Me.NewRow,DataBinRow)
            rowDataBinRow.ItemArray = New Object() {Nome, Sexo, DataNasc, DispensaBiometria, DataFinalDispensa, NomeMae, CPF, RG, Idade, Nothing}
            Me.Rows.Add(rowDataBinRow)
            Return rowDataBinRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DataBinDataTable = CType(MyBase.Clone,DataBinDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DataBinDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNome = Me.Columns("Nome")
            Me.columnSexo = Me.Columns("Sexo")
            Me.columnDataNasc = Me.Columns("DataNasc")
            Me.columnDispensaBiometria = Me.Columns("DispensaBiometria")
            Me.columnDataFinalDispensa = Me.Columns("DataFinalDispensa")
            Me.columnNomeMae = Me.Columns("NomeMae")
            Me.columnCPF = Me.Columns("CPF")
            Me.columnRG = Me.Columns("RG")
            Me.columnIdade = Me.Columns("Idade")
            Me.columnDataBin_Id = Me.Columns("DataBin_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnNome = New DataColumn("Nome", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnNome)
            Me.columnSexo = New DataColumn("Sexo", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnSexo)
            Me.columnDataNasc = New DataColumn("DataNasc", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnDataNasc)
            Me.columnDispensaBiometria = New DataColumn("DispensaBiometria", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnDispensaBiometria)
            Me.columnDataFinalDispensa = New DataColumn("DataFinalDispensa", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnDataFinalDispensa)
            Me.columnNomeMae = New DataColumn("NomeMae", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnNomeMae)
            Me.columnCPF = New DataColumn("CPF", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnCPF)
            Me.columnRG = New DataColumn("RG", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnRG)
            Me.columnIdade = New DataColumn("Idade", GetType(System.Int32), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnIdade)
            Me.columnDataBin_Id = New DataColumn("DataBin_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnDataBin_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnDataBin_Id}, true))
            Me.columnNome.Namespace = ""
            Me.columnSexo.Namespace = ""
            Me.columnDataNasc.Namespace = ""
            Me.columnDispensaBiometria.Namespace = ""
            Me.columnDataFinalDispensa.Namespace = ""
            Me.columnNomeMae.Namespace = ""
            Me.columnCPF.Namespace = ""
            Me.columnRG.Namespace = ""
            Me.columnIdade.Namespace = ""
            Me.columnDataBin_Id.AutoIncrement = true
            Me.columnDataBin_Id.AllowDBNull = false
            Me.columnDataBin_Id.Unique = true
            Me.Namespace = ""
        End Sub
        
        Public Function NewDataBinRow() As DataBinRow
            Return CType(Me.NewRow,DataBinRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DataBinRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DataBinRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DataBinRowChangedEvent) Is Nothing) Then
                RaiseEvent DataBinRowChanged(Me, New DataBinRowChangeEvent(CType(e.Row,DataBinRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DataBinRowChangingEvent) Is Nothing) Then
                RaiseEvent DataBinRowChanging(Me, New DataBinRowChangeEvent(CType(e.Row,DataBinRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DataBinRowDeletedEvent) Is Nothing) Then
                RaiseEvent DataBinRowDeleted(Me, New DataBinRowChangeEvent(CType(e.Row,DataBinRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DataBinRowDeletingEvent) Is Nothing) Then
                RaiseEvent DataBinRowDeleting(Me, New DataBinRowChangeEvent(CType(e.Row,DataBinRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDataBinRow(ByVal row As DataBinRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DataBinRow
        Inherits DataRow
        
        Private tableDataBin As DataBinDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDataBin = CType(Me.Table,DataBinDataTable)
        End Sub
        
        Public Property Nome As String
            Get
                Try 
                    Return CType(Me(Me.tableDataBin.NomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataBin.NomeColumn) = value
            End Set
        End Property
        
        Public Property Sexo As String
            Get
                Try 
                    Return CType(Me(Me.tableDataBin.SexoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataBin.SexoColumn) = value
            End Set
        End Property
        
        Public Property DataNasc As String
            Get
                Try 
                    Return CType(Me(Me.tableDataBin.DataNascColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataBin.DataNascColumn) = value
            End Set
        End Property
        
        Public Property DispensaBiometria As String
            Get
                Try 
                    Return CType(Me(Me.tableDataBin.DispensaBiometriaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataBin.DispensaBiometriaColumn) = value
            End Set
        End Property
        
        Public Property DataFinalDispensa As String
            Get
                Try 
                    Return CType(Me(Me.tableDataBin.DataFinalDispensaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataBin.DataFinalDispensaColumn) = value
            End Set
        End Property
        
        Public Property NomeMae As String
            Get
                Try 
                    Return CType(Me(Me.tableDataBin.NomeMaeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataBin.NomeMaeColumn) = value
            End Set
        End Property
        
        Public Property CPF As String
            Get
                Try 
                    Return CType(Me(Me.tableDataBin.CPFColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataBin.CPFColumn) = value
            End Set
        End Property
        
        Public Property RG As String
            Get
                Try 
                    Return CType(Me(Me.tableDataBin.RGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataBin.RGColumn) = value
            End Set
        End Property
        
        Public Property Idade As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDataBin.IdadeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataBin.IdadeColumn) = value
            End Set
        End Property
        
        Public Function IsNomeNull() As Boolean
            Return Me.IsNull(Me.tableDataBin.NomeColumn)
        End Function
        
        Public Sub SetNomeNull()
            Me(Me.tableDataBin.NomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSexoNull() As Boolean
            Return Me.IsNull(Me.tableDataBin.SexoColumn)
        End Function
        
        Public Sub SetSexoNull()
            Me(Me.tableDataBin.SexoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataNascNull() As Boolean
            Return Me.IsNull(Me.tableDataBin.DataNascColumn)
        End Function
        
        Public Sub SetDataNascNull()
            Me(Me.tableDataBin.DataNascColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDispensaBiometriaNull() As Boolean
            Return Me.IsNull(Me.tableDataBin.DispensaBiometriaColumn)
        End Function
        
        Public Sub SetDispensaBiometriaNull()
            Me(Me.tableDataBin.DispensaBiometriaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataFinalDispensaNull() As Boolean
            Return Me.IsNull(Me.tableDataBin.DataFinalDispensaColumn)
        End Function
        
        Public Sub SetDataFinalDispensaNull()
            Me(Me.tableDataBin.DataFinalDispensaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNomeMaeNull() As Boolean
            Return Me.IsNull(Me.tableDataBin.NomeMaeColumn)
        End Function
        
        Public Sub SetNomeMaeNull()
            Me(Me.tableDataBin.NomeMaeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCPFNull() As Boolean
            Return Me.IsNull(Me.tableDataBin.CPFColumn)
        End Function
        
        Public Sub SetCPFNull()
            Me(Me.tableDataBin.CPFColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRGNull() As Boolean
            Return Me.IsNull(Me.tableDataBin.RGColumn)
        End Function
        
        Public Sub SetRGNull()
            Me(Me.tableDataBin.RGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdadeNull() As Boolean
            Return Me.IsNull(Me.tableDataBin.IdadeColumn)
        End Function
        
        Public Sub SetIdadeNull()
            Me(Me.tableDataBin.IdadeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetHistoricoDispensasRows() As HistoricoDispensasRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("DataBin_HistoricoDispensas")),HistoricoDispensasRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DataBinRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DataBinRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DataBinRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DataBinRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HistoricoDispensasDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnData As DataColumn
        
        Private columnDescricaoDispensa As DataColumn
        
        Private columnLoginResponsavel As DataColumn
        
        Private columnDataBin_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("HistoricoDispensas")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DataColumn As DataColumn
            Get
                Return Me.columnData
            End Get
        End Property
        
        Friend ReadOnly Property DescricaoDispensaColumn As DataColumn
            Get
                Return Me.columnDescricaoDispensa
            End Get
        End Property
        
        Friend ReadOnly Property LoginResponsavelColumn As DataColumn
            Get
                Return Me.columnLoginResponsavel
            End Get
        End Property
        
        Friend ReadOnly Property DataBin_IdColumn As DataColumn
            Get
                Return Me.columnDataBin_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As HistoricoDispensasRow
            Get
                Return CType(Me.Rows(index),HistoricoDispensasRow)
            End Get
        End Property
        
        Public Event HistoricoDispensasRowChanged As HistoricoDispensasRowChangeEventHandler
        
        Public Event HistoricoDispensasRowChanging As HistoricoDispensasRowChangeEventHandler
        
        Public Event HistoricoDispensasRowDeleted As HistoricoDispensasRowChangeEventHandler
        
        Public Event HistoricoDispensasRowDeleting As HistoricoDispensasRowChangeEventHandler
        
        Public Overloads Sub AddHistoricoDispensasRow(ByVal row As HistoricoDispensasRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddHistoricoDispensasRow(ByVal Data As String, ByVal DescricaoDispensa As String, ByVal LoginResponsavel As String, ByVal parentDataBinRowByDataBin_HistoricoDispensas As DataBinRow) As HistoricoDispensasRow
            Dim rowHistoricoDispensasRow As HistoricoDispensasRow = CType(Me.NewRow,HistoricoDispensasRow)
            rowHistoricoDispensasRow.ItemArray = New Object() {Data, DescricaoDispensa, LoginResponsavel, parentDataBinRowByDataBin_HistoricoDispensas(9)}
            Me.Rows.Add(rowHistoricoDispensasRow)
            Return rowHistoricoDispensasRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As HistoricoDispensasDataTable = CType(MyBase.Clone,HistoricoDispensasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New HistoricoDispensasDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnData = Me.Columns("Data")
            Me.columnDescricaoDispensa = Me.Columns("DescricaoDispensa")
            Me.columnLoginResponsavel = Me.Columns("LoginResponsavel")
            Me.columnDataBin_Id = Me.Columns("DataBin_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnData = New DataColumn("Data", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnData)
            Me.columnDescricaoDispensa = New DataColumn("DescricaoDispensa", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnDescricaoDispensa)
            Me.columnLoginResponsavel = New DataColumn("LoginResponsavel", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnLoginResponsavel)
            Me.columnDataBin_Id = New DataColumn("DataBin_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnDataBin_Id)
            Me.columnData.Namespace = ""
            Me.columnDescricaoDispensa.Namespace = ""
            Me.columnLoginResponsavel.Namespace = ""
        End Sub
        
        Public Function NewHistoricoDispensasRow() As HistoricoDispensasRow
            Return CType(Me.NewRow,HistoricoDispensasRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New HistoricoDispensasRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(HistoricoDispensasRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.HistoricoDispensasRowChangedEvent) Is Nothing) Then
                RaiseEvent HistoricoDispensasRowChanged(Me, New HistoricoDispensasRowChangeEvent(CType(e.Row,HistoricoDispensasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.HistoricoDispensasRowChangingEvent) Is Nothing) Then
                RaiseEvent HistoricoDispensasRowChanging(Me, New HistoricoDispensasRowChangeEvent(CType(e.Row,HistoricoDispensasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.HistoricoDispensasRowDeletedEvent) Is Nothing) Then
                RaiseEvent HistoricoDispensasRowDeleted(Me, New HistoricoDispensasRowChangeEvent(CType(e.Row,HistoricoDispensasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.HistoricoDispensasRowDeletingEvent) Is Nothing) Then
                RaiseEvent HistoricoDispensasRowDeleting(Me, New HistoricoDispensasRowChangeEvent(CType(e.Row,HistoricoDispensasRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveHistoricoDispensasRow(ByVal row As HistoricoDispensasRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HistoricoDispensasRow
        Inherits DataRow
        
        Private tableHistoricoDispensas As HistoricoDispensasDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableHistoricoDispensas = CType(Me.Table,HistoricoDispensasDataTable)
        End Sub
        
        Public Property Data As String
            Get
                Try 
                    Return CType(Me(Me.tableHistoricoDispensas.DataColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHistoricoDispensas.DataColumn) = value
            End Set
        End Property
        
        Public Property DescricaoDispensa As String
            Get
                Try 
                    Return CType(Me(Me.tableHistoricoDispensas.DescricaoDispensaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHistoricoDispensas.DescricaoDispensaColumn) = value
            End Set
        End Property
        
        Public Property LoginResponsavel As String
            Get
                Try 
                    Return CType(Me(Me.tableHistoricoDispensas.LoginResponsavelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHistoricoDispensas.LoginResponsavelColumn) = value
            End Set
        End Property
        
        Public Property DataBinRow As DataBinRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("DataBin_HistoricoDispensas")),DataBinRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("DataBin_HistoricoDispensas"))
            End Set
        End Property
        
        Public Function IsDataNull() As Boolean
            Return Me.IsNull(Me.tableHistoricoDispensas.DataColumn)
        End Function
        
        Public Sub SetDataNull()
            Me(Me.tableHistoricoDispensas.DataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescricaoDispensaNull() As Boolean
            Return Me.IsNull(Me.tableHistoricoDispensas.DescricaoDispensaColumn)
        End Function
        
        Public Sub SetDescricaoDispensaNull()
            Me(Me.tableHistoricoDispensas.DescricaoDispensaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLoginResponsavelNull() As Boolean
            Return Me.IsNull(Me.tableHistoricoDispensas.LoginResponsavelColumn)
        End Function
        
        Public Sub SetLoginResponsavelNull()
            Me(Me.tableHistoricoDispensas.LoginResponsavelColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HistoricoDispensasRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As HistoricoDispensasRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As HistoricoDispensasRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As HistoricoDispensasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BiometriaDPLogsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnsequencial As DataColumn
        
        Private columnCodigo As DataColumn
        
        Private columnDataHora As DataColumn
        
        Private columnDescricao As DataColumn
        
        Private columnVerificacaoOK As DataColumn
        
        Private columnCodDedo As DataColumn
        
        Friend Sub New()
            MyBase.New("BiometriaDPLogs")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property sequencialColumn As DataColumn
            Get
                Return Me.columnsequencial
            End Get
        End Property
        
        Friend ReadOnly Property CodigoColumn As DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        Friend ReadOnly Property DataHoraColumn As DataColumn
            Get
                Return Me.columnDataHora
            End Get
        End Property
        
        Friend ReadOnly Property DescricaoColumn As DataColumn
            Get
                Return Me.columnDescricao
            End Get
        End Property
        
        Friend ReadOnly Property VerificacaoOKColumn As DataColumn
            Get
                Return Me.columnVerificacaoOK
            End Get
        End Property
        
        Friend ReadOnly Property CodDedoColumn As DataColumn
            Get
                Return Me.columnCodDedo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BiometriaDPLogsRow
            Get
                Return CType(Me.Rows(index),BiometriaDPLogsRow)
            End Get
        End Property
        
        Public Event BiometriaDPLogsRowChanged As BiometriaDPLogsRowChangeEventHandler
        
        Public Event BiometriaDPLogsRowChanging As BiometriaDPLogsRowChangeEventHandler
        
        Public Event BiometriaDPLogsRowDeleted As BiometriaDPLogsRowChangeEventHandler
        
        Public Event BiometriaDPLogsRowDeleting As BiometriaDPLogsRowChangeEventHandler
        
        Public Overloads Sub AddBiometriaDPLogsRow(ByVal row As BiometriaDPLogsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBiometriaDPLogsRow(ByVal Codigo As String, ByVal DataHora As Date, ByVal Descricao As String, ByVal VerificacaoOK As Boolean, ByVal CodDedo As Integer) As BiometriaDPLogsRow
            Dim rowBiometriaDPLogsRow As BiometriaDPLogsRow = CType(Me.NewRow,BiometriaDPLogsRow)
            rowBiometriaDPLogsRow.ItemArray = New Object() {Nothing, Codigo, DataHora, Descricao, VerificacaoOK, CodDedo}
            Me.Rows.Add(rowBiometriaDPLogsRow)
            Return rowBiometriaDPLogsRow
        End Function
        
        Public Function FindBysequencial(ByVal sequencial As Integer) As BiometriaDPLogsRow
            Return CType(Me.Rows.Find(New Object() {sequencial}),BiometriaDPLogsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BiometriaDPLogsDataTable = CType(MyBase.Clone,BiometriaDPLogsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BiometriaDPLogsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnsequencial = Me.Columns("sequencial")
            Me.columnCodigo = Me.Columns("Codigo")
            Me.columnDataHora = Me.Columns("DataHora")
            Me.columnDescricao = Me.Columns("Descricao")
            Me.columnVerificacaoOK = Me.Columns("VerificacaoOK")
            Me.columnCodDedo = Me.Columns("CodDedo")
        End Sub
        
        Private Sub InitClass()
            Me.columnsequencial = New DataColumn("sequencial", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsequencial)
            Me.columnCodigo = New DataColumn("Codigo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo)
            Me.columnDataHora = New DataColumn("DataHora", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataHora)
            Me.columnDescricao = New DataColumn("Descricao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescricao)
            Me.columnVerificacaoOK = New DataColumn("VerificacaoOK", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVerificacaoOK)
            Me.columnCodDedo = New DataColumn("CodDedo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodDedo)
            Me.Constraints.Add(New UniqueConstraint("DSIdentifyKey1", New DataColumn() {Me.columnsequencial}, true))
            Me.columnsequencial.AutoIncrement = true
            Me.columnsequencial.AllowDBNull = false
            Me.columnsequencial.ReadOnly = true
            Me.columnsequencial.Unique = true
            Me.columnCodigo.AllowDBNull = false
            Me.columnDataHora.AllowDBNull = false
            Me.columnDescricao.AllowDBNull = false
            Me.columnVerificacaoOK.AllowDBNull = false
            Me.columnCodDedo.AllowDBNull = false
            Me.Namespace = ""
        End Sub
        
        Public Function NewBiometriaDPLogsRow() As BiometriaDPLogsRow
            Return CType(Me.NewRow,BiometriaDPLogsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BiometriaDPLogsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BiometriaDPLogsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BiometriaDPLogsRowChangedEvent) Is Nothing) Then
                RaiseEvent BiometriaDPLogsRowChanged(Me, New BiometriaDPLogsRowChangeEvent(CType(e.Row,BiometriaDPLogsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BiometriaDPLogsRowChangingEvent) Is Nothing) Then
                RaiseEvent BiometriaDPLogsRowChanging(Me, New BiometriaDPLogsRowChangeEvent(CType(e.Row,BiometriaDPLogsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BiometriaDPLogsRowDeletedEvent) Is Nothing) Then
                RaiseEvent BiometriaDPLogsRowDeleted(Me, New BiometriaDPLogsRowChangeEvent(CType(e.Row,BiometriaDPLogsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BiometriaDPLogsRowDeletingEvent) Is Nothing) Then
                RaiseEvent BiometriaDPLogsRowDeleting(Me, New BiometriaDPLogsRowChangeEvent(CType(e.Row,BiometriaDPLogsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBiometriaDPLogsRow(ByVal row As BiometriaDPLogsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BiometriaDPLogsRow
        Inherits DataRow
        
        Private tableBiometriaDPLogs As BiometriaDPLogsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBiometriaDPLogs = CType(Me.Table,BiometriaDPLogsDataTable)
        End Sub
        
        Public Property sequencial As Integer
            Get
                Return CType(Me(Me.tableBiometriaDPLogs.sequencialColumn),Integer)
            End Get
            Set
                Me(Me.tableBiometriaDPLogs.sequencialColumn) = value
            End Set
        End Property
        
        Public Property Codigo As String
            Get
                Return CType(Me(Me.tableBiometriaDPLogs.CodigoColumn),String)
            End Get
            Set
                Me(Me.tableBiometriaDPLogs.CodigoColumn) = value
            End Set
        End Property
        
        Public Property DataHora As Date
            Get
                Return CType(Me(Me.tableBiometriaDPLogs.DataHoraColumn),Date)
            End Get
            Set
                Me(Me.tableBiometriaDPLogs.DataHoraColumn) = value
            End Set
        End Property
        
        Public Property Descricao As String
            Get
                Return CType(Me(Me.tableBiometriaDPLogs.DescricaoColumn),String)
            End Get
            Set
                Me(Me.tableBiometriaDPLogs.DescricaoColumn) = value
            End Set
        End Property
        
        Public Property VerificacaoOK As Boolean
            Get
                Return CType(Me(Me.tableBiometriaDPLogs.VerificacaoOKColumn),Boolean)
            End Get
            Set
                Me(Me.tableBiometriaDPLogs.VerificacaoOKColumn) = value
            End Set
        End Property
        
        Public Property CodDedo As Integer
            Get
                Return CType(Me(Me.tableBiometriaDPLogs.CodDedoColumn),Integer)
            End Get
            Set
                Me(Me.tableBiometriaDPLogs.CodDedoColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BiometriaDPLogsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BiometriaDPLogsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BiometriaDPLogsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BiometriaDPLogsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BiometriaDPDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodigo As DataColumn
        
        Private columnDedo As DataColumn
        
        Private columnDataBin As DataColumn
        
        Private columnTemplate1 As DataColumn
        
        Private columnSize1 As DataColumn
        
        Private columnTemplate2 As DataColumn
        
        Private columnSize2 As DataColumn
        
        Private columnTemplate3 As DataColumn
        
        Private columnSize3 As DataColumn
        
        Friend Sub New()
            MyBase.New("BiometriaDP")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodigoColumn As DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        Friend ReadOnly Property DedoColumn As DataColumn
            Get
                Return Me.columnDedo
            End Get
        End Property
        
        Friend ReadOnly Property DataBinColumn As DataColumn
            Get
                Return Me.columnDataBin
            End Get
        End Property
        
        Friend ReadOnly Property Template1Column As DataColumn
            Get
                Return Me.columnTemplate1
            End Get
        End Property
        
        Friend ReadOnly Property Size1Column As DataColumn
            Get
                Return Me.columnSize1
            End Get
        End Property
        
        Friend ReadOnly Property Template2Column As DataColumn
            Get
                Return Me.columnTemplate2
            End Get
        End Property
        
        Friend ReadOnly Property Size2Column As DataColumn
            Get
                Return Me.columnSize2
            End Get
        End Property
        
        Friend ReadOnly Property Template3Column As DataColumn
            Get
                Return Me.columnTemplate3
            End Get
        End Property
        
        Friend ReadOnly Property Size3Column As DataColumn
            Get
                Return Me.columnSize3
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BiometriaDPRow
            Get
                Return CType(Me.Rows(index),BiometriaDPRow)
            End Get
        End Property
        
        Public Event BiometriaDPRowChanged As BiometriaDPRowChangeEventHandler
        
        Public Event BiometriaDPRowChanging As BiometriaDPRowChangeEventHandler
        
        Public Event BiometriaDPRowDeleted As BiometriaDPRowChangeEventHandler
        
        Public Event BiometriaDPRowDeleting As BiometriaDPRowChangeEventHandler
        
        Public Overloads Sub AddBiometriaDPRow(ByVal row As BiometriaDPRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBiometriaDPRow(ByVal Codigo As String, ByVal Dedo As Integer, ByVal DataBin As String, ByVal Template1() As Byte, ByVal Size1 As Integer, ByVal Template2() As Byte, ByVal Size2 As Integer, ByVal Template3() As Byte, ByVal Size3 As Integer) As BiometriaDPRow
            Dim rowBiometriaDPRow As BiometriaDPRow = CType(Me.NewRow,BiometriaDPRow)
            rowBiometriaDPRow.ItemArray = New Object() {Codigo, Dedo, DataBin, Template1, Size1, Template2, Size2, Template3, Size3}
            Me.Rows.Add(rowBiometriaDPRow)
            Return rowBiometriaDPRow
        End Function
        
        Public Function FindByCodigoDedo(ByVal Codigo As String, ByVal Dedo As Integer) As BiometriaDPRow
            Return CType(Me.Rows.Find(New Object() {Codigo, Dedo}),BiometriaDPRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BiometriaDPDataTable = CType(MyBase.Clone,BiometriaDPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BiometriaDPDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodigo = Me.Columns("Codigo")
            Me.columnDedo = Me.Columns("Dedo")
            Me.columnDataBin = Me.Columns("DataBin")
            Me.columnTemplate1 = Me.Columns("Template1")
            Me.columnSize1 = Me.Columns("Size1")
            Me.columnTemplate2 = Me.Columns("Template2")
            Me.columnSize2 = Me.Columns("Size2")
            Me.columnTemplate3 = Me.Columns("Template3")
            Me.columnSize3 = Me.Columns("Size3")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodigo = New DataColumn("Codigo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo)
            Me.columnDedo = New DataColumn("Dedo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDedo)
            Me.columnDataBin = New DataColumn("DataBin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataBin)
            Me.columnTemplate1 = New DataColumn("Template1", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTemplate1)
            Me.columnSize1 = New DataColumn("Size1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSize1)
            Me.columnTemplate2 = New DataColumn("Template2", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTemplate2)
            Me.columnSize2 = New DataColumn("Size2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSize2)
            Me.columnTemplate3 = New DataColumn("Template3", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTemplate3)
            Me.columnSize3 = New DataColumn("Size3", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSize3)
            Me.Constraints.Add(New UniqueConstraint("DSIdentifyKey2", New DataColumn() {Me.columnCodigo, Me.columnDedo}, true))
            Me.columnCodigo.AllowDBNull = false
            Me.columnDedo.AllowDBNull = false
            Me.Namespace = ""
        End Sub
        
        Public Function NewBiometriaDPRow() As BiometriaDPRow
            Return CType(Me.NewRow,BiometriaDPRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BiometriaDPRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BiometriaDPRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BiometriaDPRowChangedEvent) Is Nothing) Then
                RaiseEvent BiometriaDPRowChanged(Me, New BiometriaDPRowChangeEvent(CType(e.Row,BiometriaDPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BiometriaDPRowChangingEvent) Is Nothing) Then
                RaiseEvent BiometriaDPRowChanging(Me, New BiometriaDPRowChangeEvent(CType(e.Row,BiometriaDPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BiometriaDPRowDeletedEvent) Is Nothing) Then
                RaiseEvent BiometriaDPRowDeleted(Me, New BiometriaDPRowChangeEvent(CType(e.Row,BiometriaDPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BiometriaDPRowDeletingEvent) Is Nothing) Then
                RaiseEvent BiometriaDPRowDeleting(Me, New BiometriaDPRowChangeEvent(CType(e.Row,BiometriaDPRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBiometriaDPRow(ByVal row As BiometriaDPRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BiometriaDPRow
        Inherits DataRow
        
        Private tableBiometriaDP As BiometriaDPDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBiometriaDP = CType(Me.Table,BiometriaDPDataTable)
        End Sub
        
        Public Property Codigo As String
            Get
                Return CType(Me(Me.tableBiometriaDP.CodigoColumn),String)
            End Get
            Set
                Me(Me.tableBiometriaDP.CodigoColumn) = value
            End Set
        End Property
        
        Public Property Dedo As Integer
            Get
                Return CType(Me(Me.tableBiometriaDP.DedoColumn),Integer)
            End Get
            Set
                Me(Me.tableBiometriaDP.DedoColumn) = value
            End Set
        End Property
        
        Public Property DataBin As String
            Get
                Try 
                    Return CType(Me(Me.tableBiometriaDP.DataBinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiometriaDP.DataBinColumn) = value
            End Set
        End Property
        
        Public Property Template1 As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableBiometriaDP.Template1Column),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiometriaDP.Template1Column) = value
            End Set
        End Property
        
        Public Property Size1 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBiometriaDP.Size1Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiometriaDP.Size1Column) = value
            End Set
        End Property
        
        Public Property Template2 As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableBiometriaDP.Template2Column),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiometriaDP.Template2Column) = value
            End Set
        End Property
        
        Public Property Size2 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBiometriaDP.Size2Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiometriaDP.Size2Column) = value
            End Set
        End Property
        
        Public Property Template3 As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableBiometriaDP.Template3Column),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiometriaDP.Template3Column) = value
            End Set
        End Property
        
        Public Property Size3 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBiometriaDP.Size3Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBiometriaDP.Size3Column) = value
            End Set
        End Property
        
        Public Function IsDataBinNull() As Boolean
            Return Me.IsNull(Me.tableBiometriaDP.DataBinColumn)
        End Function
        
        Public Sub SetDataBinNull()
            Me(Me.tableBiometriaDP.DataBinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTemplate1Null() As Boolean
            Return Me.IsNull(Me.tableBiometriaDP.Template1Column)
        End Function
        
        Public Sub SetTemplate1Null()
            Me(Me.tableBiometriaDP.Template1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSize1Null() As Boolean
            Return Me.IsNull(Me.tableBiometriaDP.Size1Column)
        End Function
        
        Public Sub SetSize1Null()
            Me(Me.tableBiometriaDP.Size1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsTemplate2Null() As Boolean
            Return Me.IsNull(Me.tableBiometriaDP.Template2Column)
        End Function
        
        Public Sub SetTemplate2Null()
            Me(Me.tableBiometriaDP.Template2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSize2Null() As Boolean
            Return Me.IsNull(Me.tableBiometriaDP.Size2Column)
        End Function
        
        Public Sub SetSize2Null()
            Me(Me.tableBiometriaDP.Size2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsTemplate3Null() As Boolean
            Return Me.IsNull(Me.tableBiometriaDP.Template3Column)
        End Function
        
        Public Sub SetTemplate3Null()
            Me(Me.tableBiometriaDP.Template3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSize3Null() As Boolean
            Return Me.IsNull(Me.tableBiometriaDP.Size3Column)
        End Function
        
        Public Sub SetSize3Null()
            Me(Me.tableBiometriaDP.Size3Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BiometriaDPRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BiometriaDPRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BiometriaDPRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BiometriaDPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
