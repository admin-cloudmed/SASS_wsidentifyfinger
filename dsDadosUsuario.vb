'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2407
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsDadosUsuario
    Inherits DataSet
    
    Private tableDadosUsuario As DadosUsuarioDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DadosUsuario")) Is Nothing) Then
                Me.Tables.Add(New DadosUsuarioDataTable(ds.Tables("DadosUsuario")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DadosUsuario As DadosUsuarioDataTable
        Get
            Return Me.tableDadosUsuario
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsDadosUsuario = CType(MyBase.Clone,dsDadosUsuario)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("DadosUsuario")) Is Nothing) Then
            Me.Tables.Add(New DadosUsuarioDataTable(ds.Tables("DadosUsuario")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableDadosUsuario = CType(Me.Tables("DadosUsuario"),DadosUsuarioDataTable)
        If (Not (Me.tableDadosUsuario) Is Nothing) Then
            Me.tableDadosUsuario.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsDadosUsuario"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsDadosUsuario.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableDadosUsuario = New DadosUsuarioDataTable
        Me.Tables.Add(Me.tableDadosUsuario)
    End Sub
    
    Private Function ShouldSerializeDadosUsuario() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub DadosUsuarioRowChangeEventHandler(ByVal sender As Object, ByVal e As DadosUsuarioRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DadosUsuarioDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNome As DataColumn
        
        Private columnDataNasc As DataColumn
        
        Private columnSexo As DataColumn
        
        Private columnNomeMae As DataColumn
        
        Private columnCPF As DataColumn
        
        Private columnRG As DataColumn
        
        Friend Sub New()
            MyBase.New("DadosUsuario")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NomeColumn As DataColumn
            Get
                Return Me.columnNome
            End Get
        End Property
        
        Friend ReadOnly Property DataNascColumn As DataColumn
            Get
                Return Me.columnDataNasc
            End Get
        End Property
        
        Friend ReadOnly Property SexoColumn As DataColumn
            Get
                Return Me.columnSexo
            End Get
        End Property
        
        Friend ReadOnly Property NomeMaeColumn As DataColumn
            Get
                Return Me.columnNomeMae
            End Get
        End Property
        
        Friend ReadOnly Property CPFColumn As DataColumn
            Get
                Return Me.columnCPF
            End Get
        End Property
        
        Friend ReadOnly Property RGColumn As DataColumn
            Get
                Return Me.columnRG
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DadosUsuarioRow
            Get
                Return CType(Me.Rows(index),DadosUsuarioRow)
            End Get
        End Property
        
        Public Event DadosUsuarioRowChanged As DadosUsuarioRowChangeEventHandler
        
        Public Event DadosUsuarioRowChanging As DadosUsuarioRowChangeEventHandler
        
        Public Event DadosUsuarioRowDeleted As DadosUsuarioRowChangeEventHandler
        
        Public Event DadosUsuarioRowDeleting As DadosUsuarioRowChangeEventHandler
        
        Public Overloads Sub AddDadosUsuarioRow(ByVal row As DadosUsuarioRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDadosUsuarioRow(ByVal Nome As String, ByVal DataNasc As Date, ByVal Sexo As String, ByVal NomeMae As String, ByVal CPF As String, ByVal RG As String) As DadosUsuarioRow
            Dim rowDadosUsuarioRow As DadosUsuarioRow = CType(Me.NewRow,DadosUsuarioRow)
            rowDadosUsuarioRow.ItemArray = New Object() {Nome, DataNasc, Sexo, NomeMae, CPF, RG}
            Me.Rows.Add(rowDadosUsuarioRow)
            Return rowDadosUsuarioRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DadosUsuarioDataTable = CType(MyBase.Clone,DadosUsuarioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DadosUsuarioDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNome = Me.Columns("Nome")
            Me.columnDataNasc = Me.Columns("DataNasc")
            Me.columnSexo = Me.Columns("Sexo")
            Me.columnNomeMae = Me.Columns("NomeMae")
            Me.columnCPF = Me.Columns("CPF")
            Me.columnRG = Me.Columns("RG")
        End Sub
        
        Private Sub InitClass()
            Me.columnNome = New DataColumn("Nome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNome)
            Me.columnDataNasc = New DataColumn("DataNasc", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataNasc)
            Me.columnSexo = New DataColumn("Sexo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSexo)
            Me.columnNomeMae = New DataColumn("NomeMae", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNomeMae)
            Me.columnCPF = New DataColumn("CPF", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCPF)
            Me.columnRG = New DataColumn("RG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRG)
            Me.columnNome.AllowDBNull = false
            Me.columnDataNasc.AllowDBNull = false
            Me.columnSexo.AllowDBNull = false
            Me.columnNomeMae.AllowDBNull = false
            Me.columnCPF.AllowDBNull = false
            Me.columnRG.AllowDBNull = false
        End Sub
        
        Public Function NewDadosUsuarioRow() As DadosUsuarioRow
            Return CType(Me.NewRow,DadosUsuarioRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DadosUsuarioRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DadosUsuarioRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DadosUsuarioRowChangedEvent) Is Nothing) Then
                RaiseEvent DadosUsuarioRowChanged(Me, New DadosUsuarioRowChangeEvent(CType(e.Row,DadosUsuarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DadosUsuarioRowChangingEvent) Is Nothing) Then
                RaiseEvent DadosUsuarioRowChanging(Me, New DadosUsuarioRowChangeEvent(CType(e.Row,DadosUsuarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DadosUsuarioRowDeletedEvent) Is Nothing) Then
                RaiseEvent DadosUsuarioRowDeleted(Me, New DadosUsuarioRowChangeEvent(CType(e.Row,DadosUsuarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DadosUsuarioRowDeletingEvent) Is Nothing) Then
                RaiseEvent DadosUsuarioRowDeleting(Me, New DadosUsuarioRowChangeEvent(CType(e.Row,DadosUsuarioRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDadosUsuarioRow(ByVal row As DadosUsuarioRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DadosUsuarioRow
        Inherits DataRow
        
        Private tableDadosUsuario As DadosUsuarioDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDadosUsuario = CType(Me.Table,DadosUsuarioDataTable)
        End Sub
        
        Public Property Nome As String
            Get
                Return CType(Me(Me.tableDadosUsuario.NomeColumn),String)
            End Get
            Set
                Me(Me.tableDadosUsuario.NomeColumn) = value
            End Set
        End Property
        
        Public Property DataNasc As Date
            Get
                Return CType(Me(Me.tableDadosUsuario.DataNascColumn),Date)
            End Get
            Set
                Me(Me.tableDadosUsuario.DataNascColumn) = value
            End Set
        End Property
        
        Public Property Sexo As String
            Get
                Return CType(Me(Me.tableDadosUsuario.SexoColumn),String)
            End Get
            Set
                Me(Me.tableDadosUsuario.SexoColumn) = value
            End Set
        End Property
        
        Public Property NomeMae As String
            Get
                Return CType(Me(Me.tableDadosUsuario.NomeMaeColumn),String)
            End Get
            Set
                Me(Me.tableDadosUsuario.NomeMaeColumn) = value
            End Set
        End Property
        
        Public Property CPF As String
            Get
                Return CType(Me(Me.tableDadosUsuario.CPFColumn),String)
            End Get
            Set
                Me(Me.tableDadosUsuario.CPFColumn) = value
            End Set
        End Property
        
        Public Property RG As String
            Get
                Return CType(Me(Me.tableDadosUsuario.RGColumn),String)
            End Get
            Set
                Me(Me.tableDadosUsuario.RGColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DadosUsuarioRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DadosUsuarioRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DadosUsuarioRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DadosUsuarioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
